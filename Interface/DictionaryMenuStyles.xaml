<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Stalker_Studio">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="DictionaryBaseStyles.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="{x:Type ContextMenu}"  BasedOn="{StaticResource style_Common}">
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HasDropShadow" Value="True"/>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect Opacity="1" RenderingBias="Performance" Direction="315" ShadowDepth="5" BlurRadius="5" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect Opacity="1" RenderingBias="Performance" Direction="315" ShadowDepth="5" BlurRadius="5" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsOpen" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource brush_Selection}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Menu" BasedOn="{StaticResource style_Common}"/>
    
    <Style x:Key="style_MenuExtendedCommands"  TargetType="Menu" BasedOn="{StaticResource style_Common}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource style_MenuItemExtendedCommand}"/>
    </Style>
    
    <Style x:Key="style_MenuItem"  TargetType="{x:Type MenuItem}" BasedOn="{StaticResource style_Common}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="MenuItem">
                    <Border x:Name="Border" SnapsToDevicePixels="True">
                        <Grid x:Name="Grid"  Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                                <!--<ColumnDefinition Width="Auto" />-->
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="Icon" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon" />
                            <ContentPresenter Grid.Column="1" Margin="12,2,12,5" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="True"/>
                            <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="5,2,2,2" DockPanel.Dock="Right" />
                            <!--<Path x:Name="Arrow" Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 0 7 L 4 3.5 Z" Width="13">
                    <Path.Fill>
                        <SolidColorBrush Color="{DynamicResource color_Glyph}" />
                    </Path.Fill>
                </Path>-->
                            <Popup x:Name="Popup"
                     Placement="Bottom"
                     IsOpen="{TemplateBinding IsSubmenuOpen}"
                     Focusable="False"
                     SnapsToDevicePixels="True"
                     Effect="{x:Null}">
                                <Border x:Name="SubmenuBorder"
                        SnapsToDevicePixels="True"
                        BorderThickness="1"
                        BorderBrush="{DynamicResource brush_Selection}">
                                    <ScrollViewer SnapsToDevicePixels="True" VerticalScrollBarVisibility="Auto" CanContentScroll="False" Background="{DynamicResource brush_BackgroundContent}">
                                        <StackPanel SnapsToDevicePixels="True" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <!--<Setter TargetName="Arrow" Property="Visibility" Value="Collapsed" />-->
                            <Setter TargetName="InputGestureText" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                            <Setter Property="Background" TargetName="Grid" Value="{DynamicResource brush_Selection}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource brush_Focused}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="style_MenuItemExtendedCommand" TargetType="MenuItem" BasedOn="{StaticResource style_MenuItem}">
        <Setter Property="Header" Value="{Binding RelativeSource={RelativeSource Self}, Path=Command.Name}"/>
        <Setter Property="Icon" Value="{Binding RelativeSource={RelativeSource Self}, Path=Command.Icon}"/>
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Command.ToolTip}"/>
    </Style>
    
    <Style TargetType="MenuItem" BasedOn="{StaticResource style_MenuItem}"/>

    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="0,4,0,4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderThickness="1">
                        <Border.BorderBrush>
                            <SolidColorBrush Color="{DynamicResource color_Border}" />
                        </Border.BorderBrush>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>